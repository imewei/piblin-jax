version: '3.9'

services:
  # =============================================================================
  # Development environment
  # =============================================================================
  dev:
    build:
      context: .
      target: development
      args:
        PYTHON_VERSION: "3.12"
    image: quantiq:dev
    container_name: quantiq-dev
    volumes:
      # Mount source code for live development
      - ./quantiq:/app/quantiq
      - ./tests:/app/tests
      - ./examples:/app/examples
      - ./docs:/app/docs
      # Persist Python packages cache
      - uv-cache:/root/.cache/uv
    environment:
      - PYTHONUNBUFFERED=1
      - JUPYTER_ENABLE_LAB=yes
    ports:
      - "8888:8888"  # Jupyter
      - "8000:8000"  # Optional web server
    command: /bin/bash
    stdin_open: true
    tty: true

  # =============================================================================
  # Jupyter notebook service
  # =============================================================================
  jupyter:
    build:
      context: .
      target: development
    image: quantiq:dev
    container_name: quantiq-jupyter
    volumes:
      - ./quantiq:/app/quantiq
      - ./tests:/app/tests
      - ./examples:/app/examples
      - ./notebooks:/app/notebooks
      - uv-cache:/root/.cache/uv
    environment:
      - PYTHONUNBUFFERED=1
      - JUPYTER_ENABLE_LAB=yes
    ports:
      - "8888:8888"
    command: >
      bash -c "
        uv run jupyter lab
        --ip=0.0.0.0
        --port=8888
        --no-browser
        --allow-root
        --NotebookApp.token=''
        --NotebookApp.password=''
      "

  # =============================================================================
  # Testing service
  # =============================================================================
  test:
    build:
      context: .
      target: development
    image: quantiq:dev
    container_name: quantiq-test
    volumes:
      - ./quantiq:/app/quantiq
      - ./tests:/app/tests
      - ./coverage:/app/coverage
      - uv-cache:/root/.cache/uv
    environment:
      - PYTHONUNBUFFERED=1
      - COVERAGE_FILE=/app/coverage/.coverage
    command: >
      bash -c "
        uv run pytest
        -v
        --cov=quantiq
        --cov-report=html:/app/coverage/html
        --cov-report=xml:/app/coverage/coverage.xml
        --cov-report=term-missing
      "

  # =============================================================================
  # Documentation builder
  # =============================================================================
  docs:
    build:
      context: .
      target: development
    image: quantiq:dev
    container_name: quantiq-docs
    volumes:
      - ./quantiq:/app/quantiq
      - ./docs:/app/docs
      - uv-cache:/root/.cache/uv
    environment:
      - PYTHONUNBUFFERED=1
    ports:
      - "8080:8080"
    working_dir: /app/docs
    command: >
      bash -c "
        uv run make html &&
        cd _build/html &&
        python -m http.server 8080
      "

  # =============================================================================
  # Production runtime (minimal)
  # =============================================================================
  app:
    build:
      context: .
      target: runtime
    image: quantiq:latest
    container_name: quantiq-app
    environment:
      - PYTHONUNBUFFERED=1
    command: python -c "import quantiq; print(f'QuantiQ v{quantiq.__version__}')"
    restart: unless-stopped

  # =============================================================================
  # GPU-enabled service (requires NVIDIA Docker runtime)
  # =============================================================================
  gpu:
    build:
      context: .
      target: gpu-cuda
    image: quantiq:gpu
    container_name: quantiq-gpu
    volumes:
      - ./quantiq:/app/quantiq
      - ./examples:/app/examples
      - uv-cache:/root/.cache/uv
    environment:
      - PYTHONUNBUFFERED=1
      - JAX_PLATFORM_NAME=gpu
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: >
      python -c "
        import jax;
        print(f'JAX devices: {jax.devices()}');
        print(f'GPU available: {len(jax.devices()) > 0}')
      "

volumes:
  uv-cache:
    driver: local

networks:
  default:
    name: quantiq-network

# =============================================================================
# Usage:
# =============================================================================
# Start development environment:
#   docker-compose up dev
#
# Run Jupyter notebook:
#   docker-compose up jupyter
#   # Access at http://localhost:8888
#
# Run tests:
#   docker-compose run --rm test
#
# Build and serve documentation:
#   docker-compose up docs
#   # Access at http://localhost:8080
#
# Run with GPU support:
#   docker-compose up gpu
#
# Clean up:
#   docker-compose down -v
# =============================================================================
