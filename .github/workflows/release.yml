---
# Release workflow for publishing to PyPI
# Triggers on version tags (v*.*.*)

name: Release to PyPI

"on":
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v0.0.1, v1.0.0, etc.
  workflow_dispatch:  # Allow manual triggering
    inputs:
      tag:
        description: 'Tag to release (e.g., v0.0.1)'
        required: true
        type: string

# Ensure only one release workflow runs at a time
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  MIN_PYTHON_VERSION: "3.12"
  PYTHON_VERSION: "3.13"

jobs:
  # ==========================================
  # Job 1: Validate Release
  # ==========================================
  validate:
    name: Validate Release
    runs-on: ubuntu-latest

    steps:
      - name: Determine tag
        id: determine_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ inputs.tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Determined tag: $TAG"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.determine_tag.outputs.tag }}
          fetch-depth: 0  # Full history to verify tags

      - name: Validate tag format
        run: |
          TAG="${{ steps.determine_tag.outputs.tag }}"
          echo "Validating tag: $TAG"

          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid tag format: $TAG"
            echo "Expected format: v0.0.1, v1.2.3, etc."
            exit 1
          fi

          echo "‚úÖ Tag format is valid"
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Release version: $VERSION"

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Verify version consistency
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Check pyproject.toml
          PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | \
            sed 's/version = "\(.*\)"/\1/')
          echo "pyproject.toml version: $PYPROJECT_VERSION"

          # Check __init__.py
          INIT_VERSION=$(grep '^__version__ = ' quantiq/__init__.py | \
            sed 's/__version__ = "\(.*\)"/\1/')
          echo "__init__.py version: $INIT_VERSION"

          # Verify all match
          if [ "$VERSION" != "$PYPROJECT_VERSION" ]; then
            echo "‚ùå Version mismatch"
            echo "  tag=$VERSION, pyproject.toml=$PYPROJECT_VERSION"
            exit 1
          fi

          if [ "$VERSION" != "$INIT_VERSION" ]; then
            echo "‚ùå Version mismatch"
            echo "  tag=$VERSION, __init__.py=$INIT_VERSION"
            exit 1
          fi

          echo "‚úÖ All version numbers are consistent: $VERSION"

  # ==========================================
  # Job 2: Build Distribution
  # ==========================================
  # Note: Skipping full test suite - releases should only be created
  # from commits that have already passed CI/CD pipeline
  build:
    name: Build Distribution
    needs: validate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Build package
        run: |
          echo "üì¶ Building distribution packages..."
          uv build
          echo "‚úÖ Build complete"

      - name: Verify build artifacts
        run: |
          echo "üìã Build artifacts:"
          ls -lh dist/

          # Verify wheel and sdist exist
          if [ ! -f dist/*.whl ] || [ ! -f dist/*.tar.gz ]; then
            echo "‚ùå Missing build artifacts"
            exit 1
          fi

          echo "‚úÖ All build artifacts present"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 30
          if-no-files-found: error

  # ==========================================
  # Job 3: Publish to TestPyPI
  # ==========================================
  publish-testpypi:
    name: Publish to TestPyPI
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for trusted publishing

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          verbose: true

      - name: Verify TestPyPI upload
        run: |
          echo "‚úÖ Package published to TestPyPI"
          echo "üîó https://test.pypi.org/project/quantiq-jax/"
          echo ""
          echo "Test installation with:"
          echo "  pip install --index-url https://test.pypi.org/simple/ quantiq-jax"

  # ==========================================
  # Job 4: Publish to PyPI
  # ==========================================
  publish-pypi:
    name: Publish to PyPI
    needs: publish-testpypi
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for trusted publishing

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

      - name: Verify PyPI upload
        run: |
          echo "‚úÖ Package published to PyPI"
          echo "üîó https://pypi.org/project/quantiq-jax/"
          echo ""
          echo "Install with:"
          echo "  pip install quantiq-jax"

  # ==========================================
  # Job 5: Create GitHub Release
  # ==========================================
  github-release:
    name: Create GitHub Release
    needs: publish-pypi
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Determine tag
        id: determine_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ inputs.tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Determined tag: $TAG"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.determine_tag.outputs.tag }}
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Extract version from tag
        id: version
        run: |
          TAG="${{ steps.determine_tag.outputs.tag }}"
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Extract release notes from CHANGELOG
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Extract release notes for this version from CHANGELOG.md
          if [ -f CHANGELOG.md ]; then
            # Extract content between ## [VERSION] and next ## heading
            NOTES=$(awk \
              "/## \[$VERSION\]/{flag=1; next} /^## /{flag=0} flag" \
              CHANGELOG.md)

            if [ -z "$NOTES" ]; then
              NOTES="Release $VERSION - See CHANGELOG.md for details"
            fi
          else
            NOTES="Release $VERSION"
          fi

          # Save to file for multiline handling
          echo "$NOTES" > release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release summary
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TAG="${{ steps.version.outputs.tag }}"

          echo "üéâ Release $VERSION published!"
          echo ""
          echo "üì¶ PyPI: https://pypi.org/project/quantiq-jax/$VERSION/"
          REPO="${{ github.server_url }}/${{ github.repository }}"
          echo "üè∑Ô∏è GitHub: $REPO/releases/tag/$TAG"
          echo ""
          echo "Install with: pip install quantiq-jax==$VERSION"
