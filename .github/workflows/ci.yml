name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  # Minimum Python version supported
  MIN_PYTHON_VERSION: "3.12"
  # Exact Python version from local environment
  PYTHON_VERSION: "3.13.9"

jobs:
  # ==========================================
  # Job 1: Validate Dependencies
  # ==========================================
  validate-dependencies:
    name: Validate Lock File Consistency
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python from .python-version
        uses: actions/setup-python@v5
        with:
          python-version-file: '.python-version'

      - name: Verify Python version consistency
        run: |
          EXPECTED=$(cat .python-version)
          ACTUAL=$(python --version | cut -d' ' -f2)
          echo "Expected Python version: $EXPECTED"
          echo "Actual Python version: $ACTUAL"
          if [ "$ACTUAL" != "$EXPECTED" ]; then
            echo "‚ùå Python version mismatch!"
            exit 1
          fi
          echo "‚úÖ Python version matches local environment: $ACTUAL"

      - name: Check if uv.lock exists
        id: check_lock
        run: |
          if [ -f "uv.lock" ]; then
            echo "lock_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ uv.lock file found"
          else
            echo "lock_exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è uv.lock file not found - will be created"
          fi

      - name: Create initial lock file if missing
        if: steps.check_lock.outputs.lock_exists == 'false'
        run: |
          echo "Creating initial uv.lock file..."
          uv lock
          echo "‚ö†Ô∏è WARNING: uv.lock was missing and has been created"
          echo "‚ö†Ô∏è Please commit this file to version control"

      - name: Verify lock file is up to date
        if: steps.check_lock.outputs.lock_exists == 'true'
        run: |
          uv lock --check || {
            echo "‚ùå uv.lock is out of sync with pyproject.toml!"
            echo "Run 'uv lock' locally and commit the updated lock file."
            exit 1
          }
          echo "‚úÖ uv.lock is up to date"

      - name: Install dependencies with exact versions
        run: |
          if [ -f "uv.lock" ]; then
            uv sync --frozen
          else
            uv sync
          fi

  # ==========================================
  # Job 2: Linting and Type Checking
  # ==========================================
  lint:
    name: Lint and Type Check
    needs: validate-dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python from .python-version
        uses: actions/setup-python@v5
        with:
          python-version-file: '.python-version'

      - name: Install dependencies
        run: |
          if [ -f "uv.lock" ]; then
            uv sync --frozen --no-dev
            uv sync --frozen --group dev
          else
            uv sync
          fi

      - name: Run Ruff linter (check only)
        run: uv run ruff check .

      - name: Run Ruff formatter check
        run: uv run ruff format --check .

      - name: Run MyPy type checker
        run: uv run mypy quantiq
        continue-on-error: true  # Don't fail on type errors initially

  # ==========================================
  # Job 3: Test Matrix (Python 3.12, 3.13)
  # ==========================================
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    needs: validate-dependencies
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display Python and uv versions
        run: |
          python --version
          uv --version

      - name: Install dependencies with exact versions
        run: |
          if [ -f "uv.lock" ]; then
            uv sync --frozen --group test
          else
            uv sync --group test
          fi
        shell: bash

      - name: Run CPU tests with coverage
        run: uv run pytest -m "not gpu and not slow" --cov --cov-report=xml --cov-report=term
        env:
          JAX_PLATFORM_NAME: cpu

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # ==========================================
  # Job 4: GPU Tests (Linux only)
  # ==========================================
  test-gpu:
    name: Test GPU Support (Linux with CUDA 12+)
    needs: validate-dependencies
    runs-on: ubuntu-latest
    # Only run on main/develop branches or when explicitly triggered
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python from .python-version
        uses: actions/setup-python@v5
        with:
          python-version-file: '.python-version'

      - name: Install dependencies (CPU fallback for CI)
        run: |
          if [ -f "uv.lock" ]; then
            uv sync --frozen --group test
          else
            uv sync --group test
          fi

      - name: Run GPU-marked tests (CPU fallback)
        run: uv run pytest -m "gpu" --cov --cov-report=term
        env:
          JAX_PLATFORM_NAME: cpu
        continue-on-error: true  # GPU tests may fail without actual GPU

      - name: Note about GPU testing
        run: |
          echo "‚ÑπÔ∏è GPU tests run in CPU fallback mode in CI"
          echo "‚ÑπÔ∏è Real GPU testing requires self-hosted runner with CUDA 12+"

  # ==========================================
  # Job 5: Security Scanning
  # ==========================================
  security:
    name: Security Scanning
    needs: validate-dependencies
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python from .python-version
        uses: actions/setup-python@v5
        with:
          python-version-file: '.python-version'

      - name: Install security tools
        run: |
          if [ -f "uv.lock" ]; then
            uv sync --frozen --group security
          else
            uv sync --group security
          fi

      - name: Run pip-audit (dependency vulnerability scan)
        run: |
          # Export dependencies to requirements.txt format for pip-audit
          uv pip freeze > requirements-audit.txt
          uv run pip-audit -r requirements-audit.txt --desc || {
            echo "‚ö†Ô∏è Vulnerabilities found - review and update dependencies"
            exit 0  # Don't fail build, just warn
          }

      - name: Run Bandit (security linter)
        run: uv run bandit -r quantiq -f json -o bandit-report.json || true

      - name: Display Bandit results
        run: |
          if [ -f bandit-report.json ]; then
            echo "üìä Bandit Security Report:"
            cat bandit-report.json
          fi

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH,MEDIUM'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for secrets with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # ==========================================
  # Job 6: Build Package
  # ==========================================
  build:
    name: Build Distribution Package
    needs: [lint, test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python from .python-version
        uses: actions/setup-python@v5
        with:
          python-version-file: '.python-version'

      - name: Build package
        run: uv build

      - name: Verify build artifacts
        run: |
          ls -lh dist/
          echo "‚úÖ Build artifacts created successfully"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
          retention-days: 7

      - name: Generate SBOM (Software Bill of Materials)
        run: |
          if [ -f "uv.lock" ]; then
            uv sync --frozen --group security
          else
            uv sync --group security
          fi
          uv run cyclonedx-py requirements -o sbom.json || echo "‚ö†Ô∏è SBOM generation skipped"

      - name: Upload SBOM artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json
          retention-days: 30

  # ==========================================
  # Job 7: Dependency Review (Pull Requests)
  # ==========================================
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          deny-licenses: GPL-3.0, AGPL-3.0

  # ==========================================
  # Job 8: All Checks Passed
  # ==========================================
  all-checks-passed:
    name: All Checks Passed
    needs: [validate-dependencies, lint, test, security, build]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          if [ "${{ needs.validate-dependencies.result }}" != "success" ] || \
             [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.security.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "‚ùå One or more checks failed"
            exit 1
          fi
          echo "‚úÖ All checks passed successfully!"
