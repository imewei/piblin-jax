---
name: CI

"on":
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:  # Allow manual trigger

# Cancel in-progress runs for same workflow + branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==========================================================================
  # Code Quality - Fast Pre-commit Checks with Ruff
  # ==========================================================================
  quality:
    name: Code quality (ruff, bandit, codespell)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: 'pip'

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Cache pre-commit environments
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit (all hooks)
        run: pre-commit run --all-files --show-diff-on-failure

      - name: Upload pre-commit results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: pre-commit-failures
          path: |
            ./**/*.py
            .pre-commit-config.yaml
          retention-days: 7

  # ==========================================================================
  # Type Checking - Optional (currently disabled)
  # ==========================================================================
  type-check:
    name: Type checking with mypy (optional)
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail CI on type errors
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run mypy (strict mode)
        run: |
          mypy quantiq --strict --show-error-codes --pretty || \
            echo "⚠️ Type errors found (expected - gradual migration)"
        continue-on-error: true

      - name: Generate mypy HTML report
        if: always()
        run: |
          mypy quantiq --strict --html-report mypy-report || true
        continue-on-error: true

      - name: Upload mypy report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mypy-type-coverage
          path: mypy-report/
          retention-days: 30

  # ==========================================================================
  # Unit Tests - Multi Python, Multi OS, Multi Backend
  # ==========================================================================
  test:
    name: >-
      Test Py${{ matrix.python-version }} ${{ matrix.os }}
      (${{ matrix.backend }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.12", "3.13"]
        backend: [jax, numpy]
        exclude:
          # Reduce matrix size - skip some combinations
          - os: windows-latest
            python-version: "3.13"
          - os: macos-latest
            python-version: "3.12"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: Install dependencies (JAX backend)
        if: matrix.backend == 'jax'
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Install dependencies (NumPy backend)
        if: matrix.backend == 'numpy'
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
          pip uninstall -y jax jaxlib

      - name: Run tests with coverage
        run: |
          # Skip coverage threshold for numpy backend
          # (JAX-dependent code is skipped)
          if [ "${{ matrix.backend }}" = "numpy" ]; then
            pytest -v --cov=quantiq --cov-report=xml \
              --cov-report=term-missing -o addopts=""
          else
            pytest -v --cov=quantiq --cov-report=xml \
              --cov-report=term-missing
          fi

      - name: Check coverage threshold
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
        run: |
          pip install coverage
          coverage report --fail-under=95 || echo "⚠️ Coverage below 95% target"
        continue-on-error: true

      - name: Upload coverage to Codecov
        if: >
          matrix.os == 'ubuntu-latest' &&
          matrix.python-version == '3.13' &&
          matrix.backend == 'jax'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests,py${{ matrix.python-version }},${{ matrix.os }}
          name: codecov-${{ matrix.python-version }}-${{ matrix.os }}
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: >-
            test-results-${{ matrix.os }}-py${{ matrix.python-version }}-
            ${{ matrix.backend }}
          path: |
            .coverage
            coverage.xml
            htmlcov/
          retention-days: 7

  # ==========================================================================
  # Performance Benchmarks - PR Only
  # ==========================================================================
  benchmark:
    name: Performance benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run benchmarks
        run: |
          pytest tests/ -m benchmark --benchmark-only \
            --benchmark-json=benchmark.json || echo "ℹ️ No benchmarks yet"
        continue-on-error: true

      - name: Store benchmark results
        if: success() && hashFiles('benchmark.json') != ''
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: false
          comment-on-alert: true
          fail-on-alert: false
          alert-threshold: '150%'  # Alert if performance degrades >50%

  # ==========================================================================
  # Example Scripts Validation
  # ==========================================================================
  examples:
    name: Validate example scripts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Check example syntax
        run: |
          for example in examples/*.py; do
            echo "Checking syntax: $example"
            python -m py_compile "$example"
          done

      - name: Validate example imports
        run: |
          for example in examples/*.py; do
            echo "Validating imports: $example"
            python -c "import ast; ast.parse(open('$example').read())"
          done

      - name: Test example execution (dry run)
        run: |
          echo "✅ All examples passed syntax and import validation"
        continue-on-error: true

  # ==========================================================================
  # Security Scanning
  # ==========================================================================
  security:
    name: Security scanning (safety, bandit)
    runs-on: ubuntu-latest
    permissions:
      security-events: write  # For uploading SARIF results
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit[toml]

      - name: Run safety check (dependencies)
        run: |
          pip install -e .
          pip freeze | safety check --stdin || \
            echo "⚠️ Vulnerable dependencies found"
        continue-on-error: true

      - name: Run bandit (code security)
        run: |
          bandit -r quantiq -c pyproject.toml -f json \
            -o bandit-report.json || true
          bandit -r quantiq -c pyproject.toml || \
            echo "⚠️ Security issues found"
        continue-on-error: true

      - name: Upload bandit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json
          retention-days: 30

  # ==========================================================================
  # Dependency Review - PR Only
  # ==========================================================================
  dependency-review:
    name: Dependency review (vulnerabilities)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          deny-licenses: GPL-3.0, AGPL-3.0
          comment-summary-in-pr: true

  # ==========================================================================
  # CI Success Summary
  # ==========================================================================
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [quality, test, examples]
    if: always()
    steps:
      - name: Check required jobs
        run: |
          if [ "${{ needs.quality.result }}" != "success" ]; then
            echo "❌ Code quality checks failed"
            exit 1
          fi
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "❌ Tests failed"
            exit 1
          fi
          if [ "${{ needs.examples.result }}" != "success" ]; then
            echo "❌ Example validation failed"
            exit 1
          fi
          echo "✅ All required CI checks passed!"

      - name: Post success comment
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ All CI checks passed! Ready for review.'
            })
