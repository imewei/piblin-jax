name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Cancel in-progress runs for the same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-dependencies:
    name: Validate Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Generate lock file and verify
        run: |
          # Generate uv.lock if it doesn't exist
          if [ ! -f uv.lock ]; then
            echo "‚ö†Ô∏è  No uv.lock found. Generating lock file..."
            uv lock
            echo "‚ùå Lock file was missing! Please run 'uv lock' locally and commit uv.lock"
            exit 1
          fi

          # Verify lock file is up to date
          echo "üîç Verifying lock file is up to date..."
          uv lock --locked

          echo "‚úÖ Lock file is valid and up to date"

      - name: Check for security vulnerabilities
        run: |
          echo "üîí Checking for known security vulnerabilities..."
          uv pip install --system safety
          uv export --frozen --no-dev | safety check --stdin || echo "‚ö†Ô∏è  Security vulnerabilities found"

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: validate-dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          if [ -f uv.lock ]; then
            uv sync --frozen --group dev
          else
            uv sync --group dev
          fi

      - name: Run Ruff linter
        run: uv run ruff check .

      - name: Run Ruff formatter check
        run: uv run ruff format --check .

      - name: Run MyPy type checker
        run: uv run mypy quantiq
        continue-on-error: true

  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: validate-dependencies
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.12", "3.13"]
        include:
          - os: macos-latest
            python-version: "3.12"
          - os: windows-latest
            python-version: "3.12"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies with exact versions
        run: |
          if [ -f uv.lock ]; then
            uv sync --frozen --group test
          else
            uv sync --group test
          fi
        shell: bash

      - name: Run tests with coverage
        run: |
          uv run pytest \
            -v \
            --cov=quantiq \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-report=html \
            -m "not slow and not gpu"
        shell: bash

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage HTML report
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-report
          path: htmlcov/
          retention-days: 7

  test-slow:
    name: Slow Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          if [ -f uv.lock ]; then
            uv sync --frozen --group test
          else
            uv sync --group test
          fi

      - name: Run slow tests
        run: uv run pytest -v -m "slow"
        timeout-minutes: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate-dependencies
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          if [ -f uv.lock ]; then
            uv sync --frozen
          else
            uv sync
          fi

      - name: Run Bandit security linter
        run: |
          uv pip install --system bandit[toml]
          bandit -r quantiq -c pyproject.toml -f json -o bandit-report.json || true
          bandit -r quantiq -c pyproject.toml || true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json
          retention-days: 30

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          severity: "CRITICAL,HIGH,MEDIUM"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
        continue-on-error: true

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install build dependencies
        run: |
          if [ -f uv.lock ]; then
            uv sync --frozen --group dev
          else
            uv sync --group dev
          fi

      - name: Build distribution packages
        run: |
          uv run python -m build

          echo "üì¶ Built packages:"
          ls -lh dist/

      - name: Check package metadata
        run: |
          uv pip install --system twine
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-packages
          path: dist/
          retention-days: 7

  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [build, test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment:
      name: test-pypi
      url: https://test.pypi.org/p/quantiq
    permissions:
      id-token: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build, test, security]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/p/quantiq
    permissions:
      id-token: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  all-checks-passed:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [validate-dependencies, lint, test, security, build]
    if: always()
    steps:
      - name: Check all job results
        run: |
          if [[ "${{ needs.validate-dependencies.result }}" != "success" ]] || \
             [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.security.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "‚ùå One or more required checks failed"
            exit 1
          fi
          echo "‚úÖ All required checks passed!"
