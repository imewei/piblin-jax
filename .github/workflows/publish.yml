---
name: Publish Package

"on":
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      pypi:
        description: 'Publish to PyPI'
        required: true
        type: boolean
        default: false
      test-pypi:
        description: 'Publish to Test PyPI'
        required: true
        type: boolean
        default: true

permissions:
  contents: read

jobs:
  # ============================================================================
  # BUILD - Create distribution packages
  # ============================================================================
  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for proper versioning

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install build dependencies
        run: |
          uv sync --frozen --extra dev

      - name: Build package
        run: |
          uv build

      - name: Verify distribution
        run: |
          ls -lh dist/

          # Check that both wheel and sdist were created
          if [ ! -f dist/*.whl ] || [ ! -f dist/*.tar.gz ]; then
            echo "❌ ERROR: Missing distribution files!"
            exit 1
          fi

          echo "✅ Distribution files created successfully"

          # Display package info
          uv run pip install twine
          uv run twine check dist/*

      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 7

  # ============================================================================
  # PUBLISH TO TEST PYPI - For testing release process
  # ============================================================================
  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [build]
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.test-pypi == 'true' ||
      github.event_name == 'release' &&
      github.event.release.prerelease == true
    environment:
      name: test-pypi
      url: https://test.pypi.org/p/quantiq
    permissions:
      id-token: write  # OIDC for PyPI trusted publishing

    steps:
      - name: Download distribution artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

      - name: Verify Test PyPI publication
        run: |
          echo "✅ Published to Test PyPI"
          echo "Install with:"
          echo "  pip install --index-url \\"
          echo "    https://test.pypi.org/simple/ quantiq"

  # ============================================================================
  # PUBLISH TO PYPI - Production release
  # ============================================================================
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build]
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.pypi == 'true' ||
      github.event_name == 'release' &&
      github.event.release.prerelease == false
    environment:
      name: pypi
      url: https://pypi.org/p/quantiq
    permissions:
      id-token: write  # OIDC for PyPI trusted publishing

    steps:
      - name: Download distribution artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Verify PyPI publication
        run: |
          echo "✅ Published to PyPI"
          echo "Install with: pip install quantiq"

  # ============================================================================
  # CREATE GITHUB RELEASE ASSETS
  # ============================================================================
  upload-release-assets:
    name: Upload Release Assets
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'
    permissions:
      contents: write

    steps:
      - name: Download distribution artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Upload wheel to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/*.whl
          asset_name: >
            quantiq-${{ github.event.release.tag_name }}-py3-none-any.whl
          asset_content_type: application/zip

      - name: Upload source distribution to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/*.tar.gz
          asset_name: quantiq-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip
