{
  "version": "1.0",
  "last_updated": "2025-10-21T14:00:00Z",
  "patterns": [
    {
      "id": "pip-audit-uv-compatibility",
      "category": "dependency-scanning",
      "problem": {
        "description": "pip-audit cannot parse pyproject.toml with uv package manager",
        "error_pattern": "ERROR:pip_audit._cli:requirement file pyproject.toml contains invalid specifier",
        "affected_tools": ["pip-audit", "uv"],
        "context": "Modern Python projects using pyproject.toml with uv package manager"
      },
      "solution": {
        "description": "Export dependencies to requirements.txt format before running pip-audit",
        "code": "uv pip freeze > requirements-audit.txt\nuv run pip-audit -r requirements-audit.txt --desc",
        "alternative_solutions": [
          "uv export --format requirements-txt > requirements.txt && pip-audit -r requirements.txt",
          "pip-audit . (audit installed environment directly)"
        ]
      },
      "metadata": {
        "confidence": 0.95,
        "occurrences": 1,
        "first_seen": "2025-10-21",
        "last_seen": "2025-10-21",
        "success_rate": 1.0,
        "avg_fix_time_minutes": 5
      },
      "tags": ["ci-cd", "security-scanning", "uv", "pip-audit", "pyproject.toml", "requirements.txt"],
      "related_commits": ["e0bddec", "1532b3b"],
      "related_issues": [],
      "documentation": "pip-audit expects requirements.txt format. Modern Python projects using pyproject.toml need to export dependencies to requirements.txt format first."
    },
    {
      "id": "uv-dependency-group-mismatch-001",
      "category": "ci-configuration",
      "problem": {
        "description": "Using PEP 735 --group syntax with PEP 621 optional-dependencies structure",
        "error_pattern": "error: Group `(\\w+)` is not defined in the project's `dependency-groups` table",
        "affected_tools": ["uv"],
        "context": "CI workflows using uv sync --group with [project.optional-dependencies]"
      },
      "solution": {
        "description": "Replace --group with --extra in uv sync commands",
        "code": "sed -i '' 's/--group /--extra /g' .github/workflows/ci.yml",
        "alternative_solutions": [
          "Convert to PEP 735 [dependency-groups] table (breaking change)",
          "Manually update each uv sync command to use --extra"
        ],
        "fix_locations": [
          ".github/workflows/ci.yml (lines with uv sync --group)"
        ]
      },
      "metadata": {
        "confidence": 0.95,
        "occurrences": 2,
        "first_seen": "2025-10-21",
        "last_seen": "2025-10-21",
        "success_rate": 1.0,
        "avg_fix_time_minutes": 2,
        "auto_fixed": true
      },
      "tags": ["ci-cd", "uv", "dependency-management", "pep-621", "pep-735", "syntax-error"],
      "related_commits": ["43f5e3a", "4177b5f"],
      "related_runs": [18684820415, 18685016155],
      "documentation": "uv supports two dependency group formats: PEP 735 [dependency-groups] (use --group) and PEP 621 [project.optional-dependencies] (use --extra). Match the syntax to your pyproject.toml structure."
    },
    {
      "id": "transform-make-copy-failures",
      "category": "test-failures",
      "problem": {
        "description": "Transform tests failing due to make_copy parameter not being respected",
        "error_pattern": "AssertionError: Arrays are not equal|Original array was modified",
        "affected_tests": [
          "test_moving_average_smoothing",
          "test_region_multiply_transform_single_region",
          "test_make_copy_true_creates_new_object",
          "test_pipeline_single_copy_at_entry"
        ],
        "context": "Data preprocessing transforms not correctly handling array copying"
      },
      "solution": {
        "description": "REQUIRES MANUAL INVESTIGATION - Likely need to fix transform implementation to properly handle make_copy parameter",
        "status": "deferred",
        "recommended_actions": [
          "Review transform base class implementation",
          "Check if make_copy parameter is properly propagated",
          "Verify array copying logic (np.copy vs array.copy)",
          "Test with different NumPy versions to identify regression",
          "Review recent commit history for transform changes"
        ]
      },
      "metadata": {
        "confidence": 0.3,
        "occurrences": 1,
        "first_seen": "2025-10-21",
        "last_seen": "2025-10-21",
        "success_rate": 0.0,
        "deferred_reason": "Requires domain knowledge of transform design intent"
      },
      "tags": ["test-failures", "preprocessing", "transforms", "make-copy", "array-mutation"],
      "related_commits": ["e0bddec"],
      "related_issues": [],
      "documentation": "Transform copy semantics may have changed with dependency version updates. Investigation needed to determine if tests or implementation is incorrect."
    },
    {
      "id": "gitleaks-shallow-clone-001",
      "category": "ci-transient",
      "problem": {
        "description": "Gitleaks secret scanning fails due to shallow Git clone missing parent commit",
        "error_pattern": "fatal: ambiguous argument '.*\\^\\.\\..+'): unknown revision or path not in the working tree",
        "affected_tools": ["gitleaks", "git"],
        "context": "GitHub Actions with default fetch-depth: 1 (shallow clone)"
      },
      "solution": {
        "description": "NOT AN AUTO-FIXABLE CODE ISSUE - Transient CI infrastructure problem",
        "status": "transient",
        "recommended_actions": [
          "Increase fetch-depth in actions/checkout step (e.g., fetch-depth: 2 or fetch-depth: 0)",
          "Configure gitleaks to scan only current commit instead of range",
          "Wait for next commit - issue often self-resolves",
          "Manually re-run the workflow"
        ],
        "code_fix_needed": false
      },
      "metadata": {
        "confidence": 0.9,
        "occurrences": 1,
        "first_seen": "2025-10-21",
        "last_seen": "2025-10-21",
        "success_rate": null,
        "auto_fixed": false,
        "transient": true
      },
      "tags": ["ci-cd", "gitleaks", "security-scanning", "git", "shallow-clone", "transient"],
      "related_commits": ["25a0362"],
      "related_runs": [18686256130],
      "documentation": "Gitleaks action automatically determines commit range based on push event. With shallow clones (fetch-depth: 1), parent commits may not be available, causing transient failures. This is not a code issue."
    },
    {
      "id": "backend-integration-test-mocking-001",
      "category": "test-failures",
      "problem": {
        "description": "Backend integration tests fail due to incomplete JAX mocking when numpyro import chain requires extensive JAX submodules",
        "error_pattern": "ModuleNotFoundError.*jax\\.tree_util|AttributeError.*NoneType.*has no attribute",
        "affected_tests": [
          "test_linux_cuda12_gpu_enabled_integration",
          "test_linux_cuda11_fallback_integration",
          "test_macos_gpu_fallback_integration",
          "test_windows_gpu_fallback_integration"
        ],
        "context": "Integration tests mocking JAX to test backend platform detection, but quantiq imports trigger numpyro which needs comprehensive JAX mock"
      },
      "solution": {
        "description": "REQUIRES TEST ARCHITECTURE REDESIGN - Tests need either comprehensive JAX mock or module import isolation",
        "status": "deferred",
        "recommended_actions": [
          "Option 1: Add all required JAX submodules to sys.modules mock (jax.tree_util, jax.lax, jax.random, etc.)",
          "Option 2: Isolate backend module testing from full quantiq package imports",
          "Option 3: Use pytest fixtures to provide comprehensive JAX mock infrastructure",
          "Option 4: Mock at a higher level - mock get_device_info() instead of JAX itself"
        ],
        "code_fix_needed": true,
        "complexity": "high"
      },
      "metadata": {
        "confidence": 0.85,
        "occurrences": 2,
        "first_seen": "2025-10-21",
        "last_seen": "2025-10-21",
        "success_rate": 0.0,
        "pre_existing": true,
        "introduced_by": "95a999e",
        "deferred_reason": "Requires comprehensive test architecture redesign"
      },
      "tags": ["test-failures", "backend", "jax", "mocking", "numpyro", "integration-tests", "pre-existing"],
      "related_commits": ["95a999e", "4177b5f", "25a0362"],
      "related_runs": [18685016155, 18686256130],
      "related_issues": [],
      "documentation": "Backend integration tests mock JAX to simulate different platform/CUDA configurations. However, quantiq package imports pull in numpyro which requires extensive JAX submodules. Tests need architectural improvements to properly isolate or comprehensively mock the JAX dependency chain."
    }
  ],
  "statistics": {
    "total_patterns": 5,
    "auto_fixed_patterns": 1,
    "deferred_patterns": 3,
    "transient_patterns": 1,
    "average_confidence": 0.79,
    "patterns_by_category": {
      "dependency-scanning": 1,
      "ci-configuration": 1,
      "test-failures": 3,
      "ci-transient": 1
    },
    "total_fixes_applied": 1,
    "total_successes": 1,
    "total_deferred": 3,
    "total_transient": 1
  },
  "learning_notes": [
    "pip-audit works best with requirements.txt format, not pyproject.toml",
    "uv package manager requires export step for compatibility with pip-based tools",
    "Test failures related to data mutation require careful investigation before auto-fixing",
    "Deleting uv.lock can expose latent bugs by changing dependency versions",
    "Security scanning tools may have different input format requirements than modern package managers",
    "uv sync --group is for PEP 735 [dependency-groups], --extra is for PEP 621 [project.optional-dependencies]",
    "Always match CI workflow syntax to pyproject.toml structure",
    "sed syntax differs between Linux (-i) and macOS (-i '')",
    "CRITICAL: Always check if test failures are PRE-EXISTING by examining previous CI runs before attempting auto-fix",
    "Gitleaks failures with 'unknown revision' in shallow clones are transient CI issues, not code bugs",
    "Integration test mocking must account for full import chain, not just the module being tested directly",
    "When quantiq package is imported, it triggers numpyro imports which require extensive JAX submodule mocking",
    "Distinguish between: (1) code bugs, (2) pre-existing test failures, (3) transient CI issues before applying fixes",
    "Compare current run failures with previous commit's run failures to identify NEW vs. PRE-EXISTING issues"
  ],
  "fix_history": [
    {
      "timestamp": "2025-10-21T05:50:00Z",
      "run_id": "18674111446",
      "pattern_id": "pip-audit-uv-compatibility",
      "solution_applied": "uv pip freeze export",
      "outcome": "success",
      "commit_sha": "1532b3b"
    },
    {
      "timestamp": "2025-10-21T13:15:00Z",
      "run_id": "18684820415",
      "pattern_id": "uv-dependency-group-mismatch-001",
      "solution_applied": "replace --group with --extra",
      "outcome": "success",
      "commit_sha": "4177b5f",
      "monitoring": false
    },
    {
      "timestamp": "2025-10-21T14:00:00Z",
      "run_id": "18686256130",
      "commit_sha": "25a0362",
      "patterns_identified": [
        "gitleaks-shallow-clone-001",
        "backend-integration-test-mocking-001"
      ],
      "solution_applied": "none - no auto-fix needed",
      "outcome": "no_fix_required",
      "analysis": "All failures were either transient CI issues or pre-existing test failures. Commit 25a0362 only contained safe linting fixes and did not introduce new failures.",
      "pre_existing_failures": true,
      "transient_issues": true
    }
  ]
}
